name: Python Package Publish Template

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: string
      pypi_url:
        description: 'URL for PyPI'
        default: 'https://pypi.org/'
        required: true
        type: string
      should_upload_coverage_to_codecov:
        description: 'Should upload coverage to Codecov?'
        default: false
        required: false
        type: boolean
      should_check_package_version:
        description: 'Should check package version'
        default: false
        required: false
        type: boolean
      should_dry_run_publish_to_test_pypi:
        description: 'Should dry run publish to TestPyPI?'
        default: false
        required: false
        type: boolean
      should_publish_to_test_pypi:
        description: 'Should publish to TestPyPI?'
        default: false
        required: false
        type: boolean
      should_publish_to_pypi:
        description: 'Should publish to PyPI?'
        default: false
        required: false
        type: boolean
      should_create_release:
        description: 'Should create release?'
        default: false
        required: false
        type: boolean

    secrets:
      pypi_token:
        description: 'Token for PyPI'
        required: true
      codecov_token:
        description: 'Token for Codecov'
        required: false

defaults:
  run:
    shell: bash

jobs:
  publish:
    name: Publish

    runs-on: ubuntu-latest

    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.pypi_url }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up python 3.10
        uses: actions/setup-python@v4.4.0
        with:
          python-version: '3.10'

      - name: Get full Python version
        id: full-python-version
        run: echo "VERSION=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT

      - name: Install poetry
        uses: snok/install-poetry@v1
        # with:
        #   version: 1.1.12

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Check package version == tag
        if: ${{ inputs.should_check_package_version }}
        run: |
          source $(poetry env info --path)/bin/activate
          VERSION=$(poetry version --short)
          echo "Expected tag: refs/tags/v${VERSION}. Tag: ${{ github.ref }}."
          if [ "${{ github.ref }}" != "refs/tags/v${VERSION}" ]; then
            echo "Tag and expected tags do not match. Exiting ..."
            exit 1;
          fi

      - name: Run tests (pytest)
        if: ${{ inputs.should_upload_coverage_to_codecov }}
        run: poetry run python -m pytest -c $(pwd)/pyproject.toml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ inputs.should_upload_coverage_to_codecov }}
        with:
          fail_ci_if_error: true
          token: ${{ secrets.codecov_token }}

      - name: Build project for distribution
        run: poetry build

      - name: Publish to Test PyPI (dry run)
        if: ${{ inputs.should_dry_run_publish_to_test_pypi }}
        env:
          POETRY_REPOSITORIES_TESTPYPI_URL: https://test.pypi.org/legacy/
          POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.pypi_token }}
        run: poetry publish --dry-run --repository testpypi

      - name: Publish to Test PyPI
        if: ${{ inputs.should_publish_to_test_pypi }}
        env:
          POETRY_REPOSITORIES_TESTPYPI_URL: https://test.pypi.org/legacy/
          POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.pypi_token }}
        run: poetry publish --repository testpypi

      - name: Publish to PyPI
        if: ${{ inputs.should_publish_to_pypi }}
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.pypi_token }}
        run: poetry publish

      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ inputs.should_create_release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
