name: Python Package Build Template

on:
  workflow_call:
    inputs:
      package_name:
        description: 'Package name'
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build (${{ matrix.python-version }})

    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        include:
          - os: Ubuntu
            image: ubuntu-latest
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry 1.1.12
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12
          # virtualenvs-in-project: true

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --no-dev

      - name: Check imports
        run: poetry run python -c 'from src.${{ inputs.package_name }} import __version__; print(__version__)'

      - name: Install dev dependencies
        run: poetry install

      - name: Check import order (isort)
        run: poetry run python -m isort --check-only --settings-path $(pwd)/pyproject.toml src/

      - name: Check unused imports (autoflake)
        run: poetry run python -m autoflake --check --remove-unused-variable --remove-all-unused-imports --expand-star-imports --ignore-init-module-imports --recursive src/

      - name: Check code style (black)
        run: poetry run python -m black --config $(pwd)/pyproject.toml .

      - name: Check code style (flake8)
        run: poetry run python -m flake8 --config $(pwd)/.flake8

      - name: Check lint (pylint)
        run: poetry run python -m pylint --rcfile $(pwd)/pyproject.toml src/

      - name: Check typing (mypy)
        run: poetry run python -m mypy --config-file $(pwd)/pyproject.toml src/

      - name: Install pytest plugin
        if: ${{ matrix.python-version == '3.10' }}
        run: poetry run pip install pytest-github-actions-annotate-failures

      - name: Run tests (pytest)
        run: poetry run python -m pytest src/
